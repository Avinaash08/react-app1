name: React_node.yml

on:
  pull_request:
    types: [opened]
    branches: [ dev ]
env:
  PR: ${{ github.event.pull_request.title }} 

#permissions:
  #pull-requests: write
  
jobs:
  build:
   # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install 

    - name: Run the cypress tests
      run: npm test

    - name: Build
      run: npm run build
      env:
          CI: ""
    - name: Generate deployment package
      run: zip -r build.zip ./build/*

    - name: Nginx Config File builder
      run: |
          echo "server {"  >> ${PR}.conf
          echo "     listen 80;" >> ${PR}.conf
          echo "     listen [::]:80;" >> ${PR}.conf
          echo "     server_name ${PR}.com www.${PR}.com;" >> ${PR}.conf

          echo "     root /home/ubuntu/${PR}/build;" >> ${PR}.conf

          echo "     index index.html index.htm;" >> ${PR}.conf

          echo "     location / {" >> ${PR}.conf
          echo "         try_files $uri $uri/ =404;" >> ${PR}.conf
          echo "     }" >> ${PR}.conf
          echo "}" >> ${PR}.conf

    - name: Copy Build Artifacts & Deploy
      uses: cross-the-world/ssh-scp-ssh-pipelines@latest
      env:
        LASTSSH: "Storing the Build Artifact in a separate location"
      with:
        host: ${{ secrets.HOSTNAME }}
        user: ${{ secrets.USERNAME }}
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        connect_timeout: 10s
        first_ssh: |
          rm -rf /home/ubuntu/${PR} 
          mkdir -p /home/ubuntu/${PR}
          mkdir -p /home/ubuntu/nginxconf/
        scp: |
          './${PR}.conf' => /home/ubuntu/nginxconf/
          './build.zip' => /home/ubuntu/${PR}/
        last_ssh: |
          echo $LASTSSH  
          unzip /home/ubuntu/${PR}/build.zip -d /home/ubuntu/${PR}/
          mv /home/ubuntu/${PR}/build.zip /tmp/${PR}.zip
          ls -ll /tmp/
    
    - name: Add Tag to GitHub
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create a GitHub release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag_version.outputs.new_tag }}
        name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}
    
    #- name: Tag with Label
      #uses: actions-ecosystem/action-add-labels@v1
      #if: ${{ github.event.pull_request.number}}
      #with:
        #labels: 'QA Passed'

    - name: Link Jira Issue
      uses: cchantep/probot-jira@ghaction-1.0.x
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        PERSONAL_TOKEN_VALUE: ${{ secrets.PERSONAL_TOKEN_VALUE }}
        PERSONAL_TOKEN_USER: 'Avinaash08'
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_DOMAIN: 'devicebits.atlassian.net'
        JIRA_USER: 'avinaash.p@results-cx.com'
        JIRA_PROJECT_NAME: 'DEVOPS'
        #board-name: 'Results-cx'
        #isCreateIssue: true
        #appendDescAfterRegex: "Jira Issue Link:"
  
    - name: Slack Notification
      uses: act10ns/slack@v1
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with: 
        status: ${{ job.status }}
        notify_when: 'failure'
        channel: '#results-cx'
        #message: Deployed {{ env.GITHUB_REF_NAME }} branch Successfully
      if: always() 
